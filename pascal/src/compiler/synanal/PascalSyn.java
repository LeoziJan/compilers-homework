
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Apr 02 02:37:50 CEST 2012
//----------------------------------------------------

package compiler.synanal;

import java_cup.runtime.*;
import compiler.report.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Apr 02 02:37:50 CEST 2012
  */
public class PascalSyn extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public PascalSyn() {super();}

  /** Constructor which sets the default scanner. */
  public PascalSyn(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public PascalSyn(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\106\000\002\002\004\000\002\002\006\000\002\003" +
    "\002\000\002\003\005\000\002\004\006\000\002\005\004" +
    "\000\002\006\002\000\002\006\004\000\002\007\006\000" +
    "\002\007\007\000\002\010\002\000\002\010\004\000\002" +
    "\011\006\000\002\011\007\000\002\020\003\000\002\020" +
    "\003\000\002\020\003\000\002\020\003\000\002\020\003" +
    "\000\002\020\005\000\002\021\003\000\002\021\003\000" +
    "\002\021\003\000\002\022\012\000\002\023\005\000\002" +
    "\024\003\000\002\024\004\000\002\025\006\000\002\026" +
    "\004\000\002\012\002\000\002\012\004\000\002\013\006" +
    "\000\002\013\007\000\002\014\002\000\002\014\004\000" +
    "\002\014\004\000\002\027\006\000\002\030\006\000\002" +
    "\034\006\000\002\035\010\000\002\031\005\000\002\032" +
    "\002\000\002\032\003\000\002\032\005\000\002\033\005" +
    "\000\002\015\003\000\002\015\003\000\002\015\003\000" +
    "\002\015\003\000\002\015\004\000\002\015\004\000\002" +
    "\015\005\000\002\015\003\000\002\015\006\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\017\003\000\002\017\003\000\002\017\003\000" +
    "\002\017\003\000\002\017\003\000\002\017\003\000\002" +
    "\017\003\000\002\017\003\000\002\017\003\000\002\017" +
    "\003\000\002\017\003\000\002\017\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\177\000\020\051\uffff\052\uffff\057\uffff\062\uffff\063" +
    "\006\067\uffff\070\uffff\001\002\000\016\051\ufffb\052\012" +
    "\057\ufffb\062\ufffb\067\ufffb\070\ufffb\001\002\000\004\002" +
    "\011\001\002\000\004\010\007\001\002\000\004\024\010" +
    "\001\002\000\016\051\ufffe\052\ufffe\057\ufffe\062\ufffe\067" +
    "\ufffe\070\ufffe\001\002\000\004\002\001\001\002\000\004" +
    "\010\175\001\002\000\014\051\ufff7\057\ufff7\062\ufff7\067" +
    "\022\070\ufff7\001\002\000\004\051\015\001\002\000\004" +
    "\055\020\001\002\000\004\016\017\001\002\000\004\002" +
    "\000\001\002\000\006\016\ufffc\024\ufffc\001\002\000\012" +
    "\051\uffe4\057\uffe4\062\uffe4\070\124\001\002\000\004\010" +
    "\024\001\002\000\012\051\ufff6\057\ufff6\062\ufff6\070\ufff6" +
    "\001\002\000\004\030\025\001\002\000\022\010\037\011" +
    "\030\012\042\013\026\021\027\042\035\047\031\064\032" +
    "\001\002\000\006\023\uffeb\024\uffeb\001\002\000\022\010" +
    "\037\011\030\012\042\013\026\021\027\042\035\047\031" +
    "\064\032\001\002\000\006\023\uffed\024\uffed\001\002\000" +
    "\004\020\056\001\002\000\004\010\050\001\002\000\006" +
    "\023\ufff3\024\ufff3\001\002\000\004\024\044\001\002\000" +
    "\022\010\037\011\030\012\042\013\026\021\027\042\035" +
    "\047\031\064\032\001\002\000\006\023\ufff0\024\ufff0\001" +
    "\002\000\006\023\ufff2\024\ufff2\001\002\000\006\023\ufff1" +
    "\024\ufff1\001\002\000\006\023\uffef\024\uffef\001\002\000" +
    "\006\023\uffec\024\uffec\001\002\000\006\023\uffe5\024\uffe5" +
    "\001\002\000\014\010\024\051\ufff5\057\ufff5\062\ufff5\070" +
    "\ufff5\001\002\000\012\051\ufff4\057\ufff4\062\ufff4\070\ufff4" +
    "\001\002\000\006\010\050\055\uffe8\001\002\000\004\055" +
    "\054\001\002\000\004\014\051\001\002\000\022\010\037" +
    "\011\030\012\042\013\026\021\027\042\035\047\031\064" +
    "\032\001\002\000\004\024\053\001\002\000\006\010\uffe6" +
    "\055\uffe6\001\002\000\006\023\uffe9\024\uffe9\001\002\000" +
    "\004\055\uffe7\001\002\000\024\004\063\005\066\006\057" +
    "\007\060\010\067\025\062\040\071\042\064\043\065\001" +
    "\002\000\044\017\uffd2\020\uffd2\022\uffd2\024\uffd2\025\uffd2" +
    "\026\uffd2\027\uffd2\030\uffd2\031\uffd2\032\uffd2\033\uffd2\034" +
    "\uffd2\036\uffd2\037\uffd2\041\uffd2\042\uffd2\043\uffd2\001\002" +
    "\000\044\017\uffd1\020\uffd1\022\uffd1\024\uffd1\025\uffd1\026" +
    "\uffd1\027\uffd1\030\uffd1\031\uffd1\032\uffd1\033\uffd1\034\uffd1" +
    "\036\uffd1\037\uffd1\041\uffd1\042\uffd1\043\uffd1\001\002\000" +
    "\024\004\063\005\066\006\057\007\060\010\067\025\062" +
    "\040\071\042\064\043\065\001\002\000\024\004\uffca\005" +
    "\uffca\006\uffca\007\uffca\010\uffca\025\uffca\040\uffca\042\uffca" +
    "\043\uffca\001\002\000\044\017\uffd4\020\uffd4\022\uffd4\024" +
    "\uffd4\025\uffd4\026\uffd4\027\uffd4\030\uffd4\031\uffd4\032\uffd4" +
    "\033\uffd4\034\uffd4\036\uffd4\037\uffd4\041\uffd4\042\uffd4\043" +
    "\uffd4\001\002\000\024\004\uffc9\005\uffc9\006\uffc9\007\uffc9" +
    "\010\uffc9\025\uffc9\040\uffc9\042\uffc9\043\uffc9\001\002\000" +
    "\024\004\uffcb\005\uffcb\006\uffcb\007\uffcb\010\uffcb\025\uffcb" +
    "\040\uffcb\042\uffcb\043\uffcb\001\002\000\044\017\uffd3\020" +
    "\uffd3\022\uffd3\024\uffd3\025\uffd3\026\uffd3\027\uffd3\030\uffd3" +
    "\031\uffd3\032\uffd3\033\uffd3\034\uffd3\036\uffd3\037\uffd3\041" +
    "\uffd3\042\uffd3\043\uffd3\001\002\000\044\017\uffcd\020\uffcd" +
    "\022\uffcd\024\uffcd\025\uffcd\026\uffcd\027\uffcd\030\uffcd\031" +
    "\uffcd\032\uffcd\033\uffcd\034\uffcd\036\uffcd\037\uffcd\041\uffcd" +
    "\042\uffcd\043\uffcd\001\002\000\040\017\100\020\106\025" +
    "\077\026\072\027\104\030\074\031\107\032\073\033\111" +
    "\034\075\036\105\037\076\041\110\042\102\043\101\001" +
    "\002\000\024\004\uffc8\005\uffc8\006\uffc8\007\uffc8\010\uffc8" +
    "\025\uffc8\040\uffc8\042\uffc8\043\uffc8\001\002\000\024\004" +
    "\uffbd\005\uffbd\006\uffbd\007\uffbd\010\uffbd\025\uffbd\040\uffbd" +
    "\042\uffbd\043\uffbd\001\002\000\024\004\uffc0\005\uffc0\006" +
    "\uffc0\007\uffc0\010\uffc0\025\uffc0\040\uffc0\042\uffc0\043\uffc0" +
    "\001\002\000\024\004\uffc3\005\uffc3\006\uffc3\007\uffc3\010" +
    "\uffc3\025\uffc3\040\uffc3\042\uffc3\043\uffc3\001\002\000\024" +
    "\004\uffc1\005\uffc1\006\uffc1\007\uffc1\010\uffc1\025\uffc1\040" +
    "\uffc1\042\uffc1\043\uffc1\001\002\000\024\004\uffc2\005\uffc2" +
    "\006\uffc2\007\uffc2\010\uffc2\025\uffc2\040\uffc2\042\uffc2\043" +
    "\uffc2\001\002\000\024\004\uffc5\005\uffc5\006\uffc5\007\uffc5" +
    "\010\uffc5\025\uffc5\040\uffc5\042\uffc5\043\uffc5\001\002\000" +
    "\024\004\063\005\066\006\057\007\060\010\067\025\062" +
    "\040\071\042\064\043\065\001\002\000\024\004\uffc4\005" +
    "\uffc4\006\uffc4\007\uffc4\010\uffc4\025\uffc4\040\uffc4\042\uffc4" +
    "\043\uffc4\001\002\000\044\017\uffcf\020\uffcf\022\uffcf\024" +
    "\uffcf\025\uffcf\026\uffcf\027\uffcf\030\uffcf\031\uffcf\032\uffcf" +
    "\033\uffcf\034\uffcf\036\uffcf\037\uffcf\041\uffcf\042\uffcf\043" +
    "\uffcf\001\002\000\024\004\063\005\066\006\057\007\060" +
    "\010\067\025\062\040\071\042\064\043\065\001\002\000" +
    "\024\004\uffc6\005\uffc6\006\uffc6\007\uffc6\010\uffc6\025\uffc6" +
    "\040\uffc6\042\uffc6\043\uffc6\001\002\000\024\004\uffc7\005" +
    "\uffc7\006\uffc7\007\uffc7\010\uffc7\025\uffc7\040\uffc7\042\uffc7" +
    "\043\uffc7\001\002\000\024\004\063\005\066\006\057\007" +
    "\060\010\067\025\062\040\071\042\064\043\065\001\002" +
    "\000\024\004\uffbf\005\uffbf\006\uffbf\007\uffbf\010\uffbf\025" +
    "\uffbf\040\uffbf\042\uffbf\043\uffbf\001\002\000\024\004\uffbc" +
    "\005\uffbc\006\uffbc\007\uffbc\010\uffbc\025\uffbc\040\uffbc\042" +
    "\uffbc\043\uffbc\001\002\000\024\004\uffbe\005\uffbe\006\uffbe" +
    "\007\uffbe\010\uffbe\025\uffbe\040\uffbe\042\uffbe\043\uffbe\001" +
    "\002\000\040\020\106\022\113\025\077\026\072\027\104" +
    "\030\074\031\107\032\073\033\111\034\075\036\105\037" +
    "\076\041\110\042\102\043\101\001\002\000\044\017\uffcc" +
    "\020\uffcc\022\uffcc\024\uffcc\025\uffcc\026\uffcc\027\uffcc\030" +
    "\uffcc\031\uffcc\032\uffcc\033\uffcc\034\uffcc\036\uffcc\037\uffcc" +
    "\041\uffcc\042\uffcc\043\uffcc\001\002\000\044\017\uffce\020" +
    "\106\022\uffce\024\uffce\025\077\026\072\027\104\030\074" +
    "\031\107\032\073\033\111\034\075\036\105\037\076\041" +
    "\110\042\102\043\101\001\002\000\040\020\106\022\116" +
    "\025\077\026\072\027\104\030\074\031\107\032\073\033" +
    "\111\034\075\036\105\037\076\041\110\042\102\043\101" +
    "\001\002\000\004\061\117\001\002\000\022\010\037\011" +
    "\030\012\042\013\026\021\027\042\035\047\031\064\032" +
    "\001\002\000\006\023\uffea\024\uffea\001\002\000\044\017" +
    "\uffd0\020\106\022\uffd0\024\uffd0\025\077\026\072\027\104" +
    "\030\074\031\107\032\073\033\111\034\075\036\105\037" +
    "\076\041\110\042\102\043\101\001\002\000\004\023\123" +
    "\001\002\000\006\023\uffee\024\uffee\001\002\000\004\010" +
    "\167\001\002\000\010\051\uffe0\057\133\062\131\001\002" +
    "\000\010\051\uffe0\057\133\062\131\001\002\000\016\051" +
    "\ufffb\052\012\057\ufffb\062\ufffb\067\ufffb\070\ufffb\001\002" +
    "\000\004\051\ufffd\001\002\000\004\010\157\001\002\000" +
    "\010\051\uffe0\057\133\062\131\001\002\000\004\010\140" +
    "\001\002\000\016\051\ufffb\052\012\057\ufffb\062\ufffb\067" +
    "\ufffb\070\ufffb\001\002\000\004\051\015\001\002\000\004" +
    "\024\137\001\002\000\010\051\uffdb\057\uffdb\062\uffdb\001" +
    "\002\000\004\021\142\001\002\000\004\014\153\001\002" +
    "\000\006\010\143\023\uffd8\001\002\000\004\014\151\001" +
    "\002\000\006\023\uffd7\024\147\001\002\000\004\023\146" +
    "\001\002\000\006\014\uffd9\024\uffd9\001\002\000\004\010" +
    "\143\001\002\000\004\023\uffd6\001\002\000\022\010\037" +
    "\011\030\012\042\013\026\021\027\042\035\047\031\064" +
    "\032\001\002\000\006\023\uffd5\024\uffd5\001\002\000\022" +
    "\010\037\011\030\012\042\013\026\021\027\042\035\047" +
    "\031\064\032\001\002\000\004\024\155\001\002\000\016" +
    "\051\uffda\052\uffda\057\uffda\062\uffda\067\uffda\070\uffda\001" +
    "\002\000\004\051\uffdf\001\002\000\004\021\142\001\002" +
    "\000\004\024\161\001\002\000\016\051\uffdc\052\uffdc\057" +
    "\uffdc\062\uffdc\067\uffdc\070\uffdc\001\002\000\004\051\015" +
    "\001\002\000\004\024\164\001\002\000\010\051\uffdd\057" +
    "\uffdd\062\uffdd\001\002\000\004\051\uffde\001\002\000\010" +
    "\051\uffe3\057\uffe3\062\uffe3\001\002\000\004\014\170\001" +
    "\002\000\022\010\037\011\030\012\042\013\026\021\027" +
    "\042\035\047\031\064\032\001\002\000\004\024\172\001" +
    "\002\000\012\010\167\051\uffe2\057\uffe2\062\uffe2\001\002" +
    "\000\010\051\uffe1\057\uffe1\062\uffe1\001\002\000\014\051" +
    "\ufffa\057\ufffa\062\ufffa\067\ufffa\070\ufffa\001\002\000\004" +
    "\030\176\001\002\000\024\004\063\005\066\006\057\007" +
    "\060\010\067\025\062\040\071\042\064\043\065\001\002" +
    "\000\040\020\106\024\200\025\077\026\072\027\104\030" +
    "\074\031\107\032\073\033\111\034\075\036\105\037\076" +
    "\041\110\042\102\043\101\001\002\000\016\010\175\051" +
    "\ufff9\057\ufff9\062\ufff9\067\ufff9\070\ufff9\001\002\000\014" +
    "\051\ufff8\057\ufff8\062\ufff8\067\ufff8\070\ufff8\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\177\000\006\002\004\003\003\001\001\000\006\004" +
    "\013\006\012\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\007\173\001\001\000\004\010\020\001\001\000\004" +
    "\005\015\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\124\001\001" +
    "\000\004\011\022\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\020\033\021\032\022\037\023\035\026\040" +
    "\001\001\000\002\001\001\000\014\020\121\021\032\022" +
    "\037\023\035\026\040\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\024\046\025\045\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\020\042\021\032\022\037" +
    "\023\035\026\040\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\011\044\001\001\000\002\001" +
    "\001\000\006\024\054\025\045\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\020\051\021\032\022\037\023" +
    "\035\026\040\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\015\067\016" +
    "\060\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\015\120\016\060\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\017\102\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\015\114\016\060\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\015\113\016\060\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\015\111\016\060\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\017\102\001\001\000\002\001\001\000\004\017\102" +
    "\001\001\000\004\017\102\001\001\000\002\001\001\000" +
    "\014\020\117\021\032\022\037\023\035\026\040\001\001" +
    "\000\002\001\001\000\004\017\102\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\165\001\001\000\014" +
    "\014\127\027\131\030\126\034\125\035\133\001\001\000" +
    "\014\014\164\027\131\030\126\034\125\035\133\001\001" +
    "\000\006\004\161\006\012\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\014\155\027\131\030\126\034\125" +
    "\035\133\001\001\000\002\001\001\000\006\004\134\006" +
    "\012\001\001\000\004\005\135\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\031\140\001\001\000\002\001" +
    "\001\000\006\032\144\033\143\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\033\147\001\001\000\002\001\001\000\014\020\151" +
    "\021\032\022\037\023\035\026\040\001\001\000\002\001" +
    "\001\000\014\020\153\021\032\022\037\023\035\026\040" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\031\157\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\005\162\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\020\170\021\032\022\037\023\035\026" +
    "\040\001\001\000\002\001\001\000\004\013\172\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\015\176\016\060\001\001\000\004\017\102\001\001" +
    "\000\004\007\200\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$PascalSyn$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$PascalSyn$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$PascalSyn$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



        public void syntax_error(Symbol cur_token) {
            Report.warning ("Syntax error near word '" + (String)(cur_token.value) + "'.", cur_token.left, cur_token.right);
        }

        public void report_error(String message, Object info) {
        }

        public void report_fatal_error(String message, Object info) throws Exception {
        	throw new Exception(message);
        }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$PascalSyn$actions {
  private final PascalSyn parser;

  /** Constructor */
  CUP$PascalSyn$actions(PascalSyn parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$PascalSyn$do_action(
    int                        CUP$PascalSyn$act_num,
    java_cup.runtime.lr_parser CUP$PascalSyn$parser,
    java.util.Stack            CUP$PascalSyn$stack,
    int                        CUP$PascalSyn$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$PascalSyn$result;

      /* select the action based on the action number */
      switch (CUP$PascalSyn$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // infix ::= OR 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("infix",13, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // infix ::= AND 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("infix",13, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // infix ::= LEQ 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("infix",13, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // infix ::= GEQ 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("infix",13, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // infix ::= GTH 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("infix",13, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // infix ::= LTH 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("infix",13, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // infix ::= NEQ 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("infix",13, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // infix ::= EQU 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("infix",13, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // infix ::= SUB 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("infix",13, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // infix ::= ADD 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("infix",13, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // infix ::= DIV 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("infix",13, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // infix ::= MUL 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("infix",13, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // prefix ::= NOT 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("prefix",12, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // prefix ::= PTR 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("prefix",12, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // prefix ::= ADD 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("prefix",12, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // prefix ::= SUB 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("prefix",12, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // value ::= value LBRACKET value RBRACKET 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value",11, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // value ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value",11, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // value ::= value infix value 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value",11, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // value ::= value PTR 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value",11, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // value ::= prefix value 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value",11, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // value ::= NIL 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value",11, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // value ::= INT_CONST 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value",11, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // value ::= CHAR_CONST 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value",11, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // value ::= BOOL_CONST 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value",11, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // parameter_desc ::= IDENTIFIER COLON type_desc 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("parameter_desc",25, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // parameter ::= parameter_desc SEMIC parameter_desc 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("parameter",24, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // parameter ::= parameter_desc 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("parameter",24, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // parameter ::= 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("parameter",24, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // parameters ::= LPARENTHESIS parameter RPARENTHESIS 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("parameters",23, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // function_head ::= FUNCTION IDENTIFIER parameters COLON type_desc SEMIC 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("function_head",27, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-5)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // function ::= function_head declaration sentence SEMIC 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("function",26, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // procedure_head ::= PROCEDURE IDENTIFIER parameters SEMIC 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("procedure_head",22, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // procedure ::= procedure_head declaration sentence SEMIC 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("procedure",21, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // subroutine ::= function subroutine 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("subroutine",10, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // subroutine ::= procedure subroutine 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("subroutine",10, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // subroutine ::= 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("subroutine",10, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // var_ ::= IDENTIFIER COLON type_desc SEMIC var_ 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("var_",9, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-4)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // var_ ::= IDENTIFIER COLON type_desc SEMIC 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("var_",9, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // var ::= VAR var_ 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("var",8, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // var ::= 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("var",8, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // type_pointer ::= PTR type_desc 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("type_pointer",20, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // type_record_component ::= IDENTIFIER COLON type_desc SEMIC 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("type_record_component",19, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // type_record_components ::= type_record_component type_record_components 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("type_record_components",18, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // type_record_components ::= type_record_component 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("type_record_components",18, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // type_record ::= RECORD type_record_components END 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("type_record",17, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // type_table ::= ARRAY LBRACKET value DOTS value RBRACKET OF type_desc 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("type_table",16, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-7)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // type_atom ::= INT 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("type_atom",15, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // type_atom ::= CHAR 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("type_atom",15, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // type_atom ::= BOOL 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("type_atom",15, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // type_desc ::= LPARENTHESIS type_desc RPARENTHESIS 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("type_desc",14, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // type_desc ::= type_pointer 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("type_desc",14, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // type_desc ::= type_record 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("type_desc",14, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // type_desc ::= type_table 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("type_desc",14, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // type_desc ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("type_desc",14, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // type_desc ::= type_atom 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("type_desc",14, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // type_ ::= IDENTIFIER EQU type_desc SEMIC type_ 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("type_",7, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-4)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // type_ ::= IDENTIFIER EQU type_desc SEMIC 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("type_",7, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // type ::= TYPE type_ 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // type ::= 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // constant_ ::= IDENTIFIER EQU value SEMIC constant_ 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("constant_",5, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-4)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // constant_ ::= IDENTIFIER EQU value SEMIC 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("constant_",5, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // constant ::= CONST constant_ 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("constant",4, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // constant ::= 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("constant",4, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // sentence ::= BEGIN END 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("sentence",3, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declaration ::= constant type var subroutine 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // program ::= PROGRAM IDENTIFIER SEMIC 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("program",1, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("program",1, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // source ::= program declaration sentence DOT 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("source",0, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= source EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).value;
		RESULT = start_val;
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$PascalSyn$parser.done_parsing();
          return CUP$PascalSyn$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

