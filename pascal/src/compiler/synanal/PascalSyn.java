
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Apr 14 00:54:07 CEST 2012
//----------------------------------------------------

package compiler.synanal;

import java_cup.runtime.*;
import compiler.report.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Apr 14 00:54:07 CEST 2012
  */
public class PascalSyn extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public PascalSyn() {super();}

  /** Constructor which sets the default scanner. */
  public PascalSyn(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public PascalSyn(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\133\000\002\002\004\000\002\002\006\000\002\003" +
    "\002\000\002\003\005\000\002\004\006\000\002\006\002" +
    "\000\002\006\004\000\002\007\006\000\002\007\007\000" +
    "\002\010\002\000\002\010\004\000\002\011\006\000\002" +
    "\011\007\000\002\022\003\000\002\022\003\000\002\022" +
    "\003\000\002\022\003\000\002\022\003\000\002\022\005" +
    "\000\002\023\003\000\002\023\003\000\002\023\003\000" +
    "\002\024\012\000\002\025\005\000\002\026\003\000\002" +
    "\026\005\000\002\027\005\000\002\030\004\000\002\012" +
    "\002\000\002\012\004\000\002\013\006\000\002\013\007" +
    "\000\002\014\002\000\002\014\004\000\002\014\004\000" +
    "\002\031\006\000\002\032\006\000\002\036\006\000\002" +
    "\037\010\000\002\033\005\000\002\034\002\000\002\034" +
    "\003\000\002\034\005\000\002\035\005\000\002\015\003" +
    "\000\002\015\003\000\002\015\003\000\002\015\003\000" +
    "\002\015\004\000\002\015\004\000\002\015\005\000\002" +
    "\015\003\000\002\015\006\000\002\015\005\000\002\015" +
    "\003\000\002\015\005\000\002\015\005\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\017\003\000\002\017\003\000\002\017\003\000\002" +
    "\017\003\000\002\017\003\000\002\017\003\000\002\017" +
    "\003\000\002\017\003\000\002\017\003\000\002\017\003" +
    "\000\002\017\003\000\002\017\003\000\002\020\006\000" +
    "\002\021\002\000\002\021\003\000\002\021\005\000\002" +
    "\005\005\000\002\041\002\000\002\041\005\000\002\041" +
    "\003\000\002\040\003\000\002\040\005\000\002\040\003" +
    "\000\002\040\003\000\002\042\006\000\002\042\010\000" +
    "\002\043\006\000\002\043\006\000\002\043\012\000\002" +
    "\043\012" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\253\000\020\051\uffff\052\uffff\057\uffff\062\uffff\063" +
    "\006\067\uffff\070\uffff\001\002\000\016\051\ufffc\052\012" +
    "\057\ufffc\062\ufffc\067\ufffc\070\ufffc\001\002\000\004\002" +
    "\011\001\002\000\004\010\007\001\002\000\004\024\010" +
    "\001\002\000\016\051\ufffe\052\ufffe\057\ufffe\062\ufffe\067" +
    "\ufffe\070\ufffe\001\002\000\004\002\001\001\002\000\004" +
    "\010\251\001\002\000\014\051\ufff8\057\ufff8\062\ufff8\067" +
    "\171\070\ufff8\001\002\000\004\051\016\001\002\000\004" +
    "\016\167\001\002\000\040\004\025\005\043\006\032\007" +
    "\027\010\023\020\030\021\034\025\035\040\022\042\017" +
    "\043\031\055\uffb3\056\041\060\026\071\021\001\002\000" +
    "\030\004\uffc6\005\uffc6\006\uffc6\007\uffc6\010\uffc6\020\uffc6" +
    "\021\uffc6\025\uffc6\040\uffc6\042\uffc6\043\uffc6\001\002\000" +
    "\006\024\165\055\uffb1\001\002\000\030\004\025\005\043" +
    "\006\032\007\027\010\023\020\030\021\034\025\035\040" +
    "\022\042\017\043\031\001\002\000\030\004\uffc5\005\uffc5" +
    "\006\uffc5\007\uffc5\010\uffc5\020\uffc5\021\uffc5\025\uffc5\040" +
    "\uffc5\042\uffc5\043\uffc5\001\002\000\070\015\uffce\016\uffce" +
    "\017\uffce\020\uffce\021\153\022\uffce\023\uffce\024\uffce\025" +
    "\uffce\026\uffce\027\uffce\030\uffce\031\uffce\032\uffce\033\uffce" +
    "\034\uffce\036\uffce\037\uffce\041\uffce\042\uffce\043\uffce\050" +
    "\uffce\053\uffce\054\uffce\055\uffce\065\uffce\066\uffce\001\002" +
    "\000\004\055\152\001\002\000\066\015\uffd5\016\uffd5\017" +
    "\uffd5\020\uffd5\022\uffd5\023\uffd5\024\uffd5\025\uffd5\026\uffd5" +
    "\027\uffd5\030\uffd5\031\uffd5\032\uffd5\033\uffd5\034\uffd5\036" +
    "\uffd5\037\uffd5\041\uffd5\042\uffd5\043\uffd5\050\uffd5\053\uffd5" +
    "\054\uffd5\055\uffd5\065\uffd5\066\uffd5\001\002\000\030\004" +
    "\025\005\043\006\032\007\027\010\023\020\030\021\034" +
    "\025\035\040\022\042\017\043\031\001\002\000\066\015" +
    "\uffd2\016\uffd2\017\uffd2\020\uffd2\022\uffd2\023\uffd2\024\uffd2" +
    "\025\uffd2\026\uffd2\027\uffd2\030\uffd2\031\uffd2\032\uffd2\033" +
    "\uffd2\034\uffd2\036\uffd2\037\uffd2\041\uffd2\042\uffd2\043\uffd2" +
    "\050\uffd2\053\uffd2\054\uffd2\055\uffd2\065\uffd2\066\uffd2\001" +
    "\002\000\022\010\117\011\107\012\121\013\106\021\105" +
    "\042\114\047\110\064\111\001\002\000\030\004\uffc8\005" +
    "\uffc8\006\uffc8\007\uffc8\010\uffc8\020\uffc8\021\uffc8\025\uffc8" +
    "\040\uffc8\042\uffc8\043\uffc8\001\002\000\066\015\uffd3\016" +
    "\uffd3\017\uffd3\020\uffd3\022\uffd3\023\uffd3\024\uffd3\025\uffd3" +
    "\026\uffd3\027\uffd3\030\uffd3\031\uffd3\032\uffd3\033\uffd3\034" +
    "\uffd3\036\uffd3\037\uffd3\041\uffd3\042\uffd3\043\uffd3\050\uffd3" +
    "\053\uffd3\054\uffd3\055\uffd3\065\uffd3\066\uffd3\001\002\000" +
    "\066\015\uffcb\016\uffcb\017\uffcb\020\uffcb\022\uffcb\023\uffcb" +
    "\024\uffcb\025\uffcb\026\uffcb\027\uffcb\030\uffcb\031\uffcb\032" +
    "\uffcb\033\uffcb\034\uffcb\036\uffcb\037\uffcb\041\uffcb\042\uffcb" +
    "\043\uffcb\050\uffcb\053\uffcb\054\uffcb\055\uffcb\065\uffcb\066" +
    "\uffcb\001\002\000\030\004\025\005\043\006\032\007\027" +
    "\010\023\020\030\021\034\025\035\040\022\042\017\043" +
    "\031\001\002\000\030\004\uffc7\005\uffc7\006\uffc7\007\uffc7" +
    "\010\uffc7\020\uffc7\021\uffc7\025\uffc7\040\uffc7\042\uffc7\043" +
    "\uffc7\001\002\000\050\016\061\020\064\024\uffb0\025\055" +
    "\026\047\027\062\030\051\031\065\032\050\033\067\034" +
    "\052\036\063\037\054\041\066\042\057\043\056\050\101" +
    "\054\uffb0\055\uffb0\001\002\000\010\024\uffae\054\uffae\055" +
    "\uffae\001\002\000\030\004\025\005\043\006\032\007\027" +
    "\010\023\020\030\021\034\025\035\040\022\042\017\043" +
    "\031\001\002\000\004\010\044\001\002\000\010\024\uffad" +
    "\054\uffad\055\uffad\001\002\000\066\015\uffd4\016\uffd4\017" +
    "\uffd4\020\uffd4\022\uffd4\023\uffd4\024\uffd4\025\uffd4\026\uffd4" +
    "\027\uffd4\030\uffd4\031\uffd4\032\uffd4\033\uffd4\034\uffd4\036" +
    "\uffd4\037\uffd4\041\uffd4\042\uffd4\043\uffd4\050\uffd4\053\uffd4" +
    "\054\uffd4\055\uffd4\065\uffd4\066\uffd4\001\002\000\004\050" +
    "\045\001\002\000\030\004\025\005\043\006\032\007\027" +
    "\010\023\020\030\021\034\025\035\040\022\042\017\043" +
    "\031\001\002\000\042\016\061\020\064\025\055\026\047" +
    "\027\062\030\051\031\065\032\050\033\067\034\052\036" +
    "\063\037\054\041\066\042\057\043\056\066\053\001\002" +
    "\000\030\004\uffba\005\uffba\006\uffba\007\uffba\010\uffba\020" +
    "\uffba\021\uffba\025\uffba\040\uffba\042\uffba\043\uffba\001\002" +
    "\000\030\004\uffbd\005\uffbd\006\uffbd\007\uffbd\010\uffbd\020" +
    "\uffbd\021\uffbd\025\uffbd\040\uffbd\042\uffbd\043\uffbd\001\002" +
    "\000\030\004\uffc0\005\uffc0\006\uffc0\007\uffc0\010\uffc0\020" +
    "\uffc0\021\uffc0\025\uffc0\040\uffc0\042\uffc0\043\uffc0\001\002" +
    "\000\030\004\uffbe\005\uffbe\006\uffbe\007\uffbe\010\uffbe\020" +
    "\uffbe\021\uffbe\025\uffbe\040\uffbe\042\uffbe\043\uffbe\001\002" +
    "\000\030\004\025\005\043\006\032\007\027\010\023\020" +
    "\030\021\034\025\035\040\022\042\017\043\031\001\002" +
    "\000\030\004\uffbf\005\uffbf\006\uffbf\007\uffbf\010\uffbf\020" +
    "\uffbf\021\uffbf\025\uffbf\040\uffbf\042\uffbf\043\uffbf\001\002" +
    "\000\030\004\uffc2\005\uffc2\006\uffc2\007\uffc2\010\uffc2\020" +
    "\uffc2\021\uffc2\025\uffc2\040\uffc2\042\uffc2\043\uffc2\001\002" +
    "\000\030\004\uffc1\005\uffc1\006\uffc1\007\uffc1\010\uffc1\020" +
    "\uffc1\021\uffc1\025\uffc1\040\uffc1\042\uffc1\043\uffc1\001\002" +
    "\000\066\015\uffd0\016\uffd0\017\uffd0\020\uffd0\022\uffd0\023" +
    "\uffd0\024\uffd0\025\uffd0\026\uffd0\027\uffd0\030\uffd0\031\uffd0" +
    "\032\uffd0\033\uffd0\034\uffd0\036\uffd0\037\uffd0\041\uffd0\042" +
    "\uffd0\043\uffd0\050\uffd0\053\uffd0\054\uffd0\055\uffd0\065\uffd0" +
    "\066\uffd0\001\002\000\030\004\025\005\043\006\032\007" +
    "\027\010\023\020\030\021\034\025\035\040\022\042\017" +
    "\043\031\001\002\000\030\004\025\005\043\006\032\007" +
    "\027\010\023\020\030\021\034\025\035\040\022\042\017" +
    "\043\031\001\002\000\030\004\uffc3\005\uffc3\006\uffc3\007" +
    "\uffc3\010\uffc3\020\uffc3\021\uffc3\025\uffc3\040\uffc3\042\uffc3" +
    "\043\uffc3\001\002\000\030\004\uffc4\005\uffc4\006\uffc4\007" +
    "\uffc4\010\uffc4\020\uffc4\021\uffc4\025\uffc4\040\uffc4\042\uffc4" +
    "\043\uffc4\001\002\000\030\004\025\005\043\006\032\007" +
    "\027\010\023\020\030\021\034\025\035\040\022\042\017" +
    "\043\031\001\002\000\030\004\uffbc\005\uffbc\006\uffbc\007" +
    "\uffbc\010\uffbc\020\uffbc\021\uffbc\025\uffbc\040\uffbc\042\uffbc" +
    "\043\uffbc\001\002\000\030\004\uffb9\005\uffb9\006\uffb9\007" +
    "\uffb9\010\uffb9\020\uffb9\021\uffb9\025\uffb9\040\uffb9\042\uffb9" +
    "\043\uffb9\001\002\000\030\004\uffbb\005\uffbb\006\uffbb\007" +
    "\uffbb\010\uffbb\020\uffbb\021\uffbb\025\uffbb\040\uffbb\042\uffbb" +
    "\043\uffbb\001\002\000\042\016\061\020\064\022\071\025" +
    "\055\026\047\027\062\030\051\031\065\032\050\033\067" +
    "\034\052\036\063\037\054\041\066\042\057\043\056\001" +
    "\002\000\066\015\uffcd\016\uffcd\017\uffcd\020\uffcd\022\uffcd" +
    "\023\uffcd\024\uffcd\025\uffcd\026\uffcd\027\uffcd\030\uffcd\031" +
    "\uffcd\032\uffcd\033\uffcd\034\uffcd\036\uffcd\037\uffcd\041\uffcd" +
    "\042\uffcd\043\uffcd\050\uffcd\053\uffcd\054\uffcd\055\uffcd\065" +
    "\uffcd\066\uffcd\001\002\000\066\015\uffcc\016\uffcc\017\uffcc" +
    "\020\uffcc\022\uffcc\023\uffcc\024\uffcc\025\uffcc\026\uffcc\027" +
    "\uffcc\030\uffcc\031\uffcc\032\uffcc\033\uffcc\034\uffcc\036\uffcc" +
    "\037\uffcc\041\uffcc\042\uffcc\043\uffcc\050\uffcc\053\uffcc\054" +
    "\uffcc\055\uffcc\065\uffcc\066\uffcc\001\002\000\066\015\uffcf" +
    "\016\061\017\uffcf\020\064\022\uffcf\023\uffcf\024\uffcf\025" +
    "\055\026\047\027\062\030\051\031\065\032\050\033\067" +
    "\034\052\036\063\037\054\041\066\042\057\043\056\050" +
    "\uffcf\053\uffcf\054\uffcf\055\uffcf\065\uffcf\066\uffcf\001\002" +
    "\000\042\016\061\020\064\025\055\026\047\027\062\030" +
    "\051\031\065\032\050\033\067\034\052\036\063\037\054" +
    "\041\066\042\057\043\056\053\075\001\002\000\040\004" +
    "\025\005\043\006\032\007\027\010\023\020\030\021\034" +
    "\025\035\040\022\042\017\043\031\051\016\056\041\060" +
    "\026\071\021\001\002\000\010\024\uffa8\054\uffa8\055\uffa8" +
    "\001\002\000\010\024\uffa7\054\uffa7\055\uffa7\001\002\000" +
    "\066\015\uffd1\016\061\017\uffd1\020\064\022\uffd1\023\uffd1" +
    "\024\uffd1\025\055\026\047\027\062\030\051\031\065\032" +
    "\050\033\067\034\052\036\063\037\054\041\066\042\057" +
    "\043\056\050\uffd1\053\uffd1\054\uffd1\055\uffd1\065\uffd1\066" +
    "\uffd1\001\002\000\030\004\025\005\043\006\032\007\027" +
    "\010\023\020\030\021\034\025\035\040\022\042\017\043" +
    "\031\001\002\000\046\016\061\020\064\024\uffaf\025\055" +
    "\026\047\027\062\030\051\031\065\032\050\033\067\034" +
    "\052\036\063\037\054\041\066\042\057\043\056\054\uffaf" +
    "\055\uffaf\001\002\000\042\016\061\020\064\023\104\025" +
    "\055\026\047\027\062\030\051\031\065\032\050\033\067" +
    "\034\052\036\063\037\054\041\066\042\057\043\056\001" +
    "\002\000\066\015\uffc9\016\uffc9\017\uffc9\020\uffc9\022\uffc9" +
    "\023\uffc9\024\uffc9\025\uffc9\026\uffc9\027\uffc9\030\uffc9\031" +
    "\uffc9\032\uffc9\033\uffc9\034\uffc9\036\uffc9\037\uffc9\041\uffc9" +
    "\042\uffc9\043\uffc9\050\uffc9\053\uffc9\054\uffc9\055\uffc9\065" +
    "\uffc9\066\uffc9\001\002\000\022\010\117\011\107\012\121" +
    "\013\106\021\105\042\114\047\110\064\111\001\002\000" +
    "\012\022\uffec\023\uffec\024\uffec\055\uffec\001\002\000\012" +
    "\022\uffee\023\uffee\024\uffee\055\uffee\001\002\000\004\020" +
    "\134\001\002\000\004\010\126\001\002\000\004\022\123" +
    "\001\002\000\012\022\ufff4\023\ufff4\024\ufff4\055\ufff4\001" +
    "\002\000\022\010\117\011\107\012\121\013\106\021\105" +
    "\042\114\047\110\064\111\001\002\000\012\022\ufff1\023" +
    "\ufff1\024\ufff1\055\ufff1\001\002\000\012\022\ufff2\023\ufff2" +
    "\024\ufff2\055\ufff2\001\002\000\012\022\ufff3\023\ufff3\024" +
    "\ufff3\055\ufff3\001\002\000\012\022\ufff0\023\ufff0\024\ufff0" +
    "\055\ufff0\001\002\000\012\022\uffed\023\uffed\024\uffed\055" +
    "\uffed\001\002\000\012\022\uffe6\023\uffe6\024\uffe6\055\uffe6" +
    "\001\002\000\066\015\uffca\016\uffca\017\uffca\020\uffca\022" +
    "\uffca\023\uffca\024\uffca\025\uffca\026\uffca\027\uffca\030\uffca" +
    "\031\uffca\032\uffca\033\uffca\034\uffca\036\uffca\037\uffca\041" +
    "\uffca\042\uffca\043\uffca\050\uffca\053\uffca\054\uffca\055\uffca" +
    "\065\uffca\066\uffca\001\002\000\004\055\133\001\002\000" +
    "\006\024\131\055\uffe9\001\002\000\004\014\127\001\002" +
    "\000\022\010\117\011\107\012\121\013\106\021\105\042" +
    "\114\047\110\064\111\001\002\000\006\024\uffe7\055\uffe7" +
    "\001\002\000\004\010\126\001\002\000\004\055\uffe8\001" +
    "\002\000\012\022\uffea\023\uffea\024\uffea\055\uffea\001\002" +
    "\000\030\004\025\005\043\006\032\007\027\010\023\020" +
    "\030\021\034\025\035\040\022\042\017\043\031\001\002" +
    "\000\042\016\061\017\136\020\064\025\055\026\047\027" +
    "\062\030\051\031\065\032\050\033\067\034\052\036\063" +
    "\037\054\041\066\042\057\043\056\001\002\000\030\004" +
    "\025\005\043\006\032\007\027\010\023\020\030\021\034" +
    "\025\035\040\022\042\017\043\031\001\002\000\042\016" +
    "\061\020\064\022\140\025\055\026\047\027\062\030\051" +
    "\031\065\032\050\033\067\034\052\036\063\037\054\041" +
    "\066\042\057\043\056\001\002\000\004\061\141\001\002" +
    "\000\022\010\117\011\107\012\121\013\106\021\105\042" +
    "\114\047\110\064\111\001\002\000\012\022\uffeb\023\uffeb" +
    "\024\uffeb\055\uffeb\001\002\000\004\023\144\001\002\000" +
    "\012\022\uffef\023\uffef\024\uffef\055\uffef\001\002\000\042" +
    "\016\061\020\064\025\055\026\047\027\062\030\051\031" +
    "\065\032\050\033\067\034\052\036\063\037\054\041\066" +
    "\042\057\043\056\065\146\001\002\000\036\004\025\005" +
    "\043\006\032\007\027\010\023\020\030\021\034\025\035" +
    "\040\022\042\017\043\031\056\041\060\026\071\021\001" +
    "\002\000\010\024\uffac\054\150\055\uffac\001\002\000\036" +
    "\004\025\005\043\006\032\007\027\010\023\020\030\021" +
    "\034\025\035\040\022\042\017\043\031\056\041\060\026" +
    "\071\021\001\002\000\010\024\uffab\054\uffab\055\uffab\001" +
    "\002\000\012\016\uffb4\024\uffb4\054\uffb4\055\uffb4\001\002" +
    "\000\032\004\025\005\043\006\032\007\027\010\023\020" +
    "\030\021\034\023\uffb7\025\035\040\022\042\017\043\031" +
    "\001\002\000\004\023\160\001\002\000\044\015\156\016" +
    "\061\020\064\023\uffb6\025\055\026\047\027\062\030\051" +
    "\031\065\032\050\033\067\034\052\036\063\037\054\041" +
    "\066\042\057\043\056\001\002\000\032\004\025\005\043" +
    "\006\032\007\027\010\023\020\030\021\034\023\uffb7\025" +
    "\035\040\022\042\017\043\031\001\002\000\004\023\uffb5" +
    "\001\002\000\066\015\uffb8\016\uffb8\017\uffb8\020\uffb8\022" +
    "\uffb8\023\uffb8\024\uffb8\025\uffb8\026\uffb8\027\uffb8\030\uffb8" +
    "\031\uffb8\032\uffb8\033\uffb8\034\uffb8\036\uffb8\037\uffb8\041" +
    "\uffb8\042\uffb8\043\uffb8\050\uffb8\053\uffb8\054\uffb8\055\uffb8" +
    "\065\uffb8\066\uffb8\001\002\000\042\016\061\020\064\025" +
    "\055\026\047\027\062\030\051\031\065\032\050\033\067" +
    "\034\052\036\063\037\054\041\066\042\057\043\056\053" +
    "\162\001\002\000\040\004\025\005\043\006\032\007\027" +
    "\010\023\020\030\021\034\025\035\040\022\042\017\043" +
    "\031\051\016\056\041\060\026\071\021\001\002\000\010" +
    "\024\uffaa\054\uffaa\055\uffaa\001\002\000\010\024\uffa9\054" +
    "\uffa9\055\uffa9\001\002\000\040\004\025\005\043\006\032" +
    "\007\027\010\023\020\030\021\034\025\035\040\022\042" +
    "\017\043\031\055\uffb3\056\041\060\026\071\021\001\002" +
    "\000\004\055\uffb2\001\002\000\004\002\000\001\002\000" +
    "\012\051\uffe5\057\uffe5\062\uffe5\070\200\001\002\000\004" +
    "\010\173\001\002\000\012\051\ufff7\057\ufff7\062\ufff7\070" +
    "\ufff7\001\002\000\004\030\174\001\002\000\022\010\117" +
    "\011\107\012\121\013\106\021\105\042\114\047\110\064" +
    "\111\001\002\000\004\024\176\001\002\000\014\010\173" +
    "\051\ufff6\057\ufff6\062\ufff6\070\ufff6\001\002\000\012\051" +
    "\ufff5\057\ufff5\062\ufff5\070\ufff5\001\002\000\004\010\243" +
    "\001\002\000\010\051\uffe1\057\210\062\205\001\002\000" +
    "\010\051\uffe1\057\210\062\205\001\002\000\004\051\ufffd" +
    "\001\002\000\016\051\ufffc\052\012\057\ufffc\062\ufffc\067" +
    "\ufffc\070\ufffc\001\002\000\004\010\233\001\002\000\010" +
    "\051\uffe1\057\210\062\205\001\002\000\016\051\ufffc\052" +
    "\012\057\ufffc\062\ufffc\067\ufffc\070\ufffc\001\002\000\004" +
    "\010\211\001\002\000\004\021\213\001\002\000\004\014" +
    "\224\001\002\000\006\010\214\023\uffd9\001\002\000\004" +
    "\014\222\001\002\000\006\023\uffd8\024\220\001\002\000" +
    "\004\023\217\001\002\000\006\014\uffda\024\uffda\001\002" +
    "\000\004\010\214\001\002\000\004\023\uffd7\001\002\000" +
    "\022\010\117\011\107\012\121\013\106\021\105\042\114" +
    "\047\110\064\111\001\002\000\006\023\uffd6\024\uffd6\001" +
    "\002\000\022\010\117\011\107\012\121\013\106\021\105" +
    "\042\114\047\110\064\111\001\002\000\004\024\226\001" +
    "\002\000\016\051\uffdb\052\uffdb\057\uffdb\062\uffdb\067\uffdb" +
    "\070\uffdb\001\002\000\004\051\016\001\002\000\004\024" +
    "\231\001\002\000\010\051\uffdc\057\uffdc\062\uffdc\001\002" +
    "\000\004\051\uffe0\001\002\000\004\021\213\001\002\000" +
    "\004\024\235\001\002\000\016\051\uffdd\052\uffdd\057\uffdd" +
    "\062\uffdd\067\uffdd\070\uffdd\001\002\000\004\051\016\001" +
    "\002\000\004\024\240\001\002\000\010\051\uffde\057\uffde" +
    "\062\uffde\001\002\000\004\051\uffdf\001\002\000\010\051" +
    "\uffe4\057\uffe4\062\uffe4\001\002\000\004\014\244\001\002" +
    "\000\022\010\117\011\107\012\121\013\106\021\105\042" +
    "\114\047\110\064\111\001\002\000\004\024\246\001\002" +
    "\000\012\010\243\051\uffe3\057\uffe3\062\uffe3\001\002\000" +
    "\010\051\uffe2\057\uffe2\062\uffe2\001\002\000\014\051\ufffb" +
    "\057\ufffb\062\ufffb\067\ufffb\070\ufffb\001\002\000\004\030" +
    "\252\001\002\000\030\004\025\005\043\006\032\007\027" +
    "\010\023\020\030\021\034\025\035\040\022\042\017\043" +
    "\031\001\002\000\042\016\061\020\064\024\254\025\055" +
    "\026\047\027\062\030\051\031\065\032\050\033\067\034" +
    "\052\036\063\037\054\041\066\042\057\043\056\001\002" +
    "\000\016\010\251\051\ufffa\057\ufffa\062\ufffa\067\ufffa\070" +
    "\ufffa\001\002\000\014\051\ufff9\057\ufff9\062\ufff9\067\ufff9" +
    "\070\ufff9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\253\000\006\002\004\003\003\001\001\000\006\004" +
    "\013\006\012\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\007\247\001\001\000\004\010\167\001\001\000\004" +
    "\005\014\001\001\000\002\001\001\000\020\015\035\016" +
    "\037\020\032\040\017\041\023\042\036\043\041\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\015\160\016" +
    "\037\020\032\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\015\144\016" +
    "\037\020\032\001\001\000\002\001\001\000\014\022\111" +
    "\023\112\024\115\025\114\030\117\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\015\102" +
    "\016\037\020\032\001\001\000\002\001\001\000\004\017" +
    "\057\001\001\000\002\001\001\000\010\015\077\016\037" +
    "\020\032\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\015\045\016\037" +
    "\020\032\001\001\000\004\017\057\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\015\073\016\037\020\032\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\015\072\016\037\020\032\001\001\000\010\015" +
    "\071\016\037\020\032\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\015\067\016\037\020\032\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\017\057\001\001\000\002\001\001\000\004\017\057\001" +
    "\001\000\004\017\057\001\001\000\004\017\057\001\001" +
    "\000\020\005\076\015\035\016\037\020\032\040\075\042" +
    "\036\043\041\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\017\057\001\001\000\010\015\101\016\037\020" +
    "\032\001\001\000\004\017\057\001\001\000\004\017\057" +
    "\001\001\000\002\001\001\000\014\022\142\023\112\024" +
    "\115\025\114\030\117\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\026\123\027\124\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\022\121" +
    "\023\112\024\115\025\114\030\117\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\022\127\023\112\024\115\025\114\030\117\001\001\000" +
    "\002\001\001\000\006\026\131\027\124\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\015\134\016\037\020" +
    "\032\001\001\000\004\017\057\001\001\000\010\015\136" +
    "\016\037\020\032\001\001\000\004\017\057\001\001\000" +
    "\002\001\001\000\014\022\141\023\112\024\115\025\114" +
    "\030\117\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\017\057\001\001\000\016\015\035" +
    "\016\037\020\032\040\146\042\036\043\041\001\001\000" +
    "\002\001\001\000\016\015\035\016\037\020\032\040\150" +
    "\042\036\043\041\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\015\154\016\037\020\032\021\153\001\001" +
    "\000\002\001\001\000\004\017\057\001\001\000\012\015" +
    "\154\016\037\020\032\021\156\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\017\057\001\001\000\020\005" +
    "\163\015\035\016\037\020\032\040\162\042\036\043\041" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\015" +
    "\035\016\037\020\032\040\017\041\165\042\036\043\041" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\200\001\001\000\004\011\171\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\022\174\023\112\024\115\025" +
    "\114\030\117\001\001\000\002\001\001\000\004\011\176" +
    "\001\001\000\002\001\001\000\004\013\241\001\001\000" +
    "\014\014\202\031\205\032\203\036\201\037\206\001\001" +
    "\000\014\014\240\031\205\032\203\036\201\037\206\001" +
    "\001\000\002\001\001\000\006\004\235\006\012\001\001" +
    "\000\002\001\001\000\014\014\231\031\205\032\203\036" +
    "\201\037\206\001\001\000\006\004\226\006\012\001\001" +
    "\000\002\001\001\000\004\033\211\001\001\000\002\001" +
    "\001\000\006\034\215\035\214\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\035\220\001\001\000\002\001\001\000\014\022\222" +
    "\023\112\024\115\025\114\030\117\001\001\000\002\001" +
    "\001\000\014\022\224\023\112\024\115\025\114\030\117" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\005" +
    "\227\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\033\233\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\005\236\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\022\244\023\112\024\115\025\114" +
    "\030\117\001\001\000\002\001\001\000\004\013\246\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\015\252\016\037\020\032\001\001\000\004\017" +
    "\057\001\001\000\004\007\254\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$PascalSyn$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$PascalSyn$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$PascalSyn$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



        public void syntax_error(Symbol cur_token) {
            Report.warning ("Syntax error near word '" + (String)(cur_token.value) + "'.", cur_token.left, cur_token.right);
        }

        public void report_error(String message, Object info) {
        }

        public void report_fatal_error(String message, Object info) throws Exception {
        	throw new Exception(message);
        }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$PascalSyn$actions {
  private final PascalSyn parser;

  /** Constructor */
  CUP$PascalSyn$actions(PascalSyn parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$PascalSyn$do_action(
    int                        CUP$PascalSyn$act_num,
    java_cup.runtime.lr_parser CUP$PascalSyn$parser,
    java.util.Stack            CUP$PascalSyn$stack,
    int                        CUP$PascalSyn$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$PascalSyn$result;

      /* select the action based on the action number */
      switch (CUP$PascalSyn$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // loop ::= FOR IDENTIFIER ASSIGN value TO value DO block_statement 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("loop",33, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-7)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // loop ::= FOR IDENTIFIER ASSIGN value TO value DO statement 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("loop",33, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-7)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // loop ::= WHILE value DO block_statement 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("loop",33, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // loop ::= WHILE value DO statement 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("loop",33, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // conditional ::= IF value THEN statement ELSE statement 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("conditional",32, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-5)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // conditional ::= IF value THEN statement 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("conditional",32, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // statement ::= loop 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("statement",30, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // statement ::= conditional 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("statement",30, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // statement ::= value ASSIGN value 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("statement",30, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // statement ::= value 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("statement",30, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // statement_ ::= statement 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("statement_",31, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // statement_ ::= statement SEMIC statement_ 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("statement_",31, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // statement_ ::= 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("statement_",31, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // block_statement ::= BEGIN statement_ END 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("block_statement",3, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // parameter_call ::= value COMMA parameter_call 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("parameter_call",15, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // parameter_call ::= value 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("parameter_call",15, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // parameter_call ::= 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("parameter_call",15, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // subroutine_call ::= IDENTIFIER LPARENTHESIS parameter_call RPARENTHESIS 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("subroutine_call",14, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // infix ::= OR 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("infix",13, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // infix ::= AND 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("infix",13, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // infix ::= LEQ 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("infix",13, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // infix ::= GEQ 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("infix",13, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // infix ::= GTH 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("infix",13, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // infix ::= LTH 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("infix",13, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // infix ::= NEQ 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("infix",13, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // infix ::= EQU 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("infix",13, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // infix ::= SUB 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("infix",13, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // infix ::= ADD 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("infix",13, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // infix ::= DIV 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("infix",13, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // infix ::= MUL 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("infix",13, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // prefix ::= NOT 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("prefix",12, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // prefix ::= PTR 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("prefix",12, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // prefix ::= ADD 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("prefix",12, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // prefix ::= SUB 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("prefix",12, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // value ::= LPARENTHESIS value RPARENTHESIS 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value",11, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // value ::= LBRACKET type_desc RBRACKET 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value",11, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // value ::= subroutine_call 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value",11, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // value ::= value DOT value 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value",11, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // value ::= value LBRACKET value RBRACKET 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value",11, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // value ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value",11, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // value ::= value infix value 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value",11, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // value ::= value PTR 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value",11, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // value ::= prefix value 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value",11, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // value ::= NIL 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value",11, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // value ::= INT_CONST 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value",11, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // value ::= CHAR_CONST 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value",11, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // value ::= BOOL_CONST 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value",11, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // parameter_desc ::= IDENTIFIER COLON type_desc 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("parameter_desc",27, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // parameter ::= parameter_desc SEMIC parameter_desc 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("parameter",26, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // parameter ::= parameter_desc 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("parameter",26, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // parameter ::= 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("parameter",26, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // parameters ::= LPARENTHESIS parameter RPARENTHESIS 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("parameters",25, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // function_head ::= FUNCTION IDENTIFIER parameters COLON type_desc SEMIC 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("function_head",29, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-5)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // function ::= function_head declaration block_statement SEMIC 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("function",28, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // procedure_head ::= PROCEDURE IDENTIFIER parameters SEMIC 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("procedure_head",24, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // procedure ::= procedure_head declaration block_statement SEMIC 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("procedure",23, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // subroutine ::= function subroutine 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("subroutine",10, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // subroutine ::= procedure subroutine 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("subroutine",10, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // subroutine ::= 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("subroutine",10, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // var_ ::= IDENTIFIER COLON type_desc SEMIC var_ 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("var_",9, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-4)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // var_ ::= IDENTIFIER COLON type_desc SEMIC 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("var_",9, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // var ::= VAR var_ 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("var",8, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // var ::= 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("var",8, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // type_pointer ::= PTR type_desc 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("type_pointer",22, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // type_record_component ::= IDENTIFIER COLON type_desc 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("type_record_component",21, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // type_record_components ::= type_record_component SEMIC type_record_components 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("type_record_components",20, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // type_record_components ::= type_record_component 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("type_record_components",20, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // type_record ::= RECORD type_record_components END 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("type_record",19, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // type_table ::= ARRAY LBRACKET value DOTS value RBRACKET OF type_desc 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("type_table",18, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-7)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // type_atom ::= INT 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("type_atom",17, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // type_atom ::= CHAR 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("type_atom",17, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // type_atom ::= BOOL 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("type_atom",17, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // type_desc ::= LPARENTHESIS type_desc RPARENTHESIS 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("type_desc",16, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // type_desc ::= type_pointer 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("type_desc",16, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // type_desc ::= type_record 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("type_desc",16, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // type_desc ::= type_table 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("type_desc",16, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // type_desc ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("type_desc",16, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // type_desc ::= type_atom 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("type_desc",16, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // type_ ::= IDENTIFIER EQU type_desc SEMIC type_ 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("type_",7, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-4)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // type_ ::= IDENTIFIER EQU type_desc SEMIC 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("type_",7, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // type ::= TYPE type_ 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // type ::= 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // constant_ ::= IDENTIFIER EQU value SEMIC constant_ 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("constant_",5, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-4)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // constant_ ::= IDENTIFIER EQU value SEMIC 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("constant_",5, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // constant ::= CONST constant_ 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("constant",4, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // constant ::= 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("constant",4, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declaration ::= constant type var subroutine 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // program ::= PROGRAM IDENTIFIER SEMIC 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("program",1, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("program",1, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // source ::= program declaration block_statement DOT 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("source",0, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= source EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).value;
		RESULT = start_val;
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$PascalSyn$parser.done_parsing();
          return CUP$PascalSyn$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

