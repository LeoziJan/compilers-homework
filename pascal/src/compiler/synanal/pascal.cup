package compiler.synanal;

import java_cup.runtime.*;

import compiler.report.*;

import compiler.abstree.*;
import compiler.abstree.tree.*;

parser code
{:
        public void syntax_error(Symbol cur_token) {
            Report.warning ("Syntax error near word '" + (String)(cur_token.value) + "'.", cur_token.left, cur_token.right);
        }

        public void report_error(String message, Object info) {
        }

        public void report_fatal_error(String message, Object info) throws Exception {
        	throw new Exception(message);
        }
:}

terminal String BOOL_CONST, CHAR_CONST, INT_CONST, NIL;
terminal String IDENTIFIER;

terminal BOOL, CHAR, INT;
terminal COLON, COMMA, DOT, DOTS, LBRACKET, LPARENTHESIS, RBRACKET, RPARENTHESIS, SEMIC;
terminal ADD, AND, DIV, EQU, GEQ, GTH, LEQ, LTH, MEM, MUL, NEQ, NOT, OR, PTR, SUB, UADD, USUB, VAL;
terminal ARRAY, ASSIGN, BEGIN, CONST, DO, ELSE, END, FOR, FUNCTION, IF, OF, PROCEDURE, PROGRAM, RECORD, THEN, TO, TYPE, VAR, WHILE;

non terminal source;
non terminal program, declaration, block_statement;
non terminal constant, constant_, one_constant, type, type_, one_type, var, var_, one_var, subroutine;
non terminal value, prefix, infix, subroutine_call, parameter_call;
non terminal type_desc, type_atom, type_array, type_record, type_record_components, type_record_component, type_pointer;
non terminal procedure, procedure_head, parameters, parameter, parameter_desc, function, function_head;
non terminal statement, statement_, conditional, loop;
non terminal eps;

precedence left OR;
precedence left AND;
precedence nonassoc EQU, NEQ, GTH, LTH, GEQ, LEQ;
precedence left ADD, SUB;
precedence left MUL, DIV;
precedence left PTR;
precedence nonassoc NOT;
precedence left DOT,LBRACKET,RBRACKET;

start with source;

eps ::= {: RESULT = new AbsDecls(); :};

source ::= program:p declaration:decl block_statement:mainblock DOT
{:
 AbsProgram program = new AbsProgram((AbsDeclName)p,
                                     (AbsDecls)decl,
                                     (AbsBlockStmt)mainblock
                                     );
 RESULT = program;
 :};

program ::= PROGRAM IDENTIFIER:id SEMIC {: RESULT = new AbsDeclName(id); :};
declaration ::= constant:consts type:types var:vars subroutine:subs
{:
 AbsDecls decls = new AbsDecls();
 decls.decls.addAll(((AbsDecls)consts).decls);
 decls.decls.addAll(((AbsDecls)types).decls);
 decls.decls.addAll(((AbsDecls)vars).decls);
 // decls.decls.addAll(((AbsDecls)subs).decls);*/

 RESULT = decls;
 :};

/*
  declarations
*/
constant ::= {: RESULT = new AbsDecls(); :} | CONST constant_:c {: RESULT =  c; :};
constant_ ::= one_constant:c {:
                              AbsDecls decls = new AbsDecls();
                              decls.decls.add((AbsConstDecl)c);
                              RESULT = decls; :}
    | one_constant:c constant_:rest
    {:
        AbsDecls decls = new AbsDecls();
        decls.decls.add((AbsConstDecl)c);
        decls.decls.addAll(((AbsDecls)rest).decls);
        RESULT = decls;
        :};
one_constant ::= IDENTIFIER:id EQU value:v SEMIC
{:
 RESULT = new AbsConstDecl(new AbsDeclName(id),
                           (AbsValExpr)v);
 :};
/* types */
type ::= {: RESULT = new AbsDecls(); :} | TYPE type_:t {: RESULT = t; :};
type_ ::= one_type:t {:
                      AbsDecls decls = new AbsDecls();
                      decls.decls.add((AbsTypeDecl)t);
                      RESULT = decls;
                      :}
    | one_type:t type_:rest {:
        AbsDecls decls = new AbsDecls();
        decls.decls.add((AbsTypeDecl)t);
        decls.decls.addAll(((AbsDecls)rest).decls);
        RESULT = decls;
        :};
one_type ::= IDENTIFIER:id EQU type_desc:desc SEMIC
{:
 RESULT = new AbsTypeDecl(new AbsDeclName(id),
                          (AbsTypeExpr)desc);
 :};
type_desc ::= type_atom:atom {: RESULT = atom; :}
    | IDENTIFIER:id {: RESULT = new AbsTypeName(id); :}
    | type_array:t {: RESULT = t; :}
    | type_record:t {: RESULT = t; :}
    | type_pointer:t {: RESULT = t; :}
    | LPARENTHESIS type_desc:t RPARENTHESIS {: RESULT = t; :};

type_atom ::= BOOL {: RESULT = new AbsAtomType(AbsAtomType.BOOL); :}
   | CHAR {: RESULT = new AbsAtomType(AbsAtomType.CHAR); :}
   | INT {: RESULT = new AbsAtomType(AbsAtomType.INT); :};

type_array ::= ARRAY LBRACKET value:lo DOTS value:hi RBRACKET OF type_desc:t
{:
 RESULT = new AbsArrayType((AbsTypeExpr)t,
                           (AbsValExpr)lo,
                           (AbsValExpr)hi);
 :};
type_record ::= RECORD type_record_components:fields END
{:
 RESULT = new AbsRecordType((AbsDecls)fields);
 :};
type_record_components ::= type_record_component:c {:
                                                    AbsDecls decls = new AbsDecls();
                                                    decls.decls.add((AbsTypeDecl)c);
                                                    RESULT = decls;
                                                    :}
    | type_record_component:c SEMIC type_record_components:rest {:
        AbsDecls decls = new AbsDecls();
        decls.decls.add((AbsTypeDecl)c);
        decls.decls.addAll(((AbsDecls)rest).decls);
        RESULT = decls;
    :};
type_record_component ::= IDENTIFIER:id COLON type_desc:desc
{:
 RESULT = new AbsTypeDecl(new AbsDeclName(id),
                          (AbsTypeExpr)desc);
 :};
type_pointer ::= PTR type_desc:desc {: RESULT = new AbsPointerType((AbsTypeExpr)desc); :};
/* variables */
var ::= {: RESULT = new AbsDecls(); :} | VAR var_:v {: RESULT = v; :};
var_ ::= one_var:v {: AbsDecls decls = new AbsDecls();
                    decls.decls.add((AbsVarDecl)v);
                    RESULT = decls;
                    :}
   | one_var:v var_:rest
   {:
       AbsDecls decls = new AbsDecls();
       decls.decls.add((AbsVarDecl)v);
       decls.decls.addAll(((AbsDecls)rest).decls);
       RESULT = decls;
    :};
one_var ::= IDENTIFIER:id COLON type_desc:t SEMIC
{:
 RESULT = new AbsVarDecl(new AbsDeclName(id),
                         (AbsTypeExpr)t);
 :};

/* subroutines */
subroutine ::= | procedure subroutine | function subroutine;
procedure ::= procedure_head declaration block_statement SEMIC;
procedure_head ::= PROCEDURE IDENTIFIER parameters SEMIC;
function ::= function_head declaration block_statement SEMIC;
function_head ::= FUNCTION IDENTIFIER parameters COLON type_desc SEMIC;
parameters ::= LPARENTHESIS parameter RPARENTHESIS;
parameter ::= | parameter_desc | parameter_desc SEMIC parameter_desc;
parameter_desc ::= IDENTIFIER COLON type_desc;

/*
  values
*/
value ::= BOOL_CONST:val {: RESULT = new AbsAtomConst(val, AbsAtomConst.BOOL); :}
    | CHAR_CONST:val {: RESULT = new AbsAtomConst(val, AbsAtomConst.CHAR); :}
    | INT_CONST:val {: RESULT = new AbsAtomConst(val, AbsAtomConst.INT); :}
    | NIL {: RESULT = new AbsNilConst(); :}
    | prefix:p value:v {: RESULT = new AbsUnExpr((Integer)p,
                                                 (AbsValExpr)v); :}
    | value:v PTR {: RESULT = new AbsUnExpr(AbsUnExpr.VAL,
                                            (AbsValExpr)v); :}
    | value:v1 infix:op value:v2 {: RESULT = new AbsBinExpr((Integer)op,
                                                            (AbsValExpr)v1,
                                                            (AbsValExpr)v2); :}
    | IDENTIFIER:id {: RESULT = new AbsValName(id); :}
    | value:v1 LBRACKET value:v2 RBRACKET {: RESULT = new AbsBinExpr(AbsBinExpr.ARRACCESS,
                                                                     (AbsValExpr)v1,
                                                                     (AbsValExpr)v2); :}
    | value:v1 DOT value:v2 {: RESULT = new AbsBinExpr(AbsBinExpr.RECACCESS,
                                                       (AbsValExpr)v1,
                                                       (AbsValExpr)v2); :}
    | subroutine_call:call {: RESULT = call; :}
    | LBRACKET type_desc:desc RBRACKET {: RESULT = new AbsAlloc((AbsTypeExpr)desc); :}
    | LPARENTHESIS value:v RPARENTHESIS {: RESULT = v; :};

prefix ::= SUB {: RESULT = AbsUnExpr.SUB; :}
    | ADD {: RESULT = AbsUnExpr.ADD; :}
    | PTR {: RESULT = AbsUnExpr.MEM; :}
    | NOT {: RESULT = AbsUnExpr.NOT; :};
infix ::= MUL {: RESULT = AbsBinExpr.MUL; :}
    | DIV {: RESULT = AbsBinExpr.DIV; :}
    | ADD {: RESULT = AbsBinExpr.ADD; :}
    | SUB {: RESULT = AbsBinExpr.SUB; :}
    | EQU {: RESULT = AbsBinExpr.EQU; :}
    | NEQ {: RESULT = AbsBinExpr.NEQ; :}
    | LTH {: RESULT = AbsBinExpr.LTH; :}
    | GTH {: RESULT = AbsBinExpr.GTH; :}
    | GEQ {: RESULT = AbsBinExpr.GEQ; :}
    | LEQ {: RESULT = AbsBinExpr.LEQ; :}
    | AND {: RESULT = AbsBinExpr.AND; :}
    | OR {: RESULT = AbsBinExpr.OR; :};
subroutine_call ::= IDENTIFIER:id LPARENTHESIS parameter_call:params RPARENTHESIS
{:
 RESULT = new AbsCallExpr(new AbsValName(id),
                          (AbsValExprs)params);
 :};
parameter_call ::= {: RESULT = new AbsValExprs(); :}
    | value:v {:
        AbsValExprs vals = new AbsValExprs();
        vals.exprs.add((AbsValExpr)v);
        RESULT = vals;
        :}
    | value:v COMMA parameter_call:rest {:
        AbsValExprs vals = new AbsValExprs();
        vals.exprs.add((AbsValExpr)v);
        vals.exprs.addAll(((AbsValExprs)rest).exprs);
        RESULT = vals;
    :};

/*
  statements
*/
block_statement ::= BEGIN statement_ END
{:
 RESULT = new AbsBlockStmt(new AbsStmts());
 :};
statement_ ::= | statement SEMIC statement_ | statement;
statement ::= value
    | value ASSIGN value
    | conditional
    | loop
    | block_statement;
conditional ::= IF value THEN statement | IF value THEN statement ELSE statement;
loop ::= WHILE value DO statement
    | FOR IDENTIFIER ASSIGN value TO value DO statement;
